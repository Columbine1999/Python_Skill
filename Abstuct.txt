面向对象编程 （OOP）
    把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。
    Python中，所有数据类型都可以视为对象，当然也可以自定义对象-面向对象中的Class的概念

class Student(object):
	"""docstring for Student"""
	def __init__(self, name, score):
		self.name = name
		self.score= score

	def print_score(self):
		print('%s : %s' % (self.name , self.score))
给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）

第一节 类(Class)和实例（Instance）
    class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧
    接着是(object)，表示该类是从哪个类继承下来的(如果没有合适的继承
    类就是用object类，这是所有的类最终都会继承的类)。
    通过定义一个特殊的__init__方法，在创建实例的时候，就把name，sc
    ore等属性绑上去：
    note：1.特殊方法“__init__”前后分别有两个下划线
    	  2.__init__方法的第一个参数永远是self，表示创建的实例本身
    	  因此在__init__方法内，就可以把各种属性绑定到self（实例本
    	  身）
    	  3.有了__init__方法后，创建实例时就不能传入空的参数了，必
    	  须传入与__init__方法匹配的参数（self自己不需要传）
    	  4.类中定义的函数第一个参数永远是self，并且调用时不用传这
    	  个参数。
    数据封装
    访问限制
    如果要让内部数据不被外部访问，可以把属性的名称前加上两个下划线__
    ,在Python中实例的变量名以__开头，就变成了一个私有变量(private)
    ,只有内部可以访问，外部不能访问。这就确保了外部代码不能任意修改对象内部状态，通过访问限制的保护，代码可以更加健壮
    note：如果外部代码要获取name和score可以给Student类增加
    get_name get_score
    class Student(object):

    def __init__(self, name, score):
        self.__name = name #__name表示name是私有变量
        self.__score = score

    def print_score(self):
        print('%s: %s' % (self.__name, self.__score))
    note:
    在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双
    下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private
    变量，所以，不能用__name__、__score__这样的变量名
    一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。